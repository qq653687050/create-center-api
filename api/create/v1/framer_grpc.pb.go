// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/create/v1/framer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FramerClient is the client API for Framer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FramerClient interface {
	CreateFramer(ctx context.Context, in *CreateFramerDTO, opts ...grpc.CallOption) (*CreateFramerVO, error)
	UpdateFramer(ctx context.Context, in *UpdateFramerDTO, opts ...grpc.CallOption) (*UpdateFramerVO, error)
	GetFramer(ctx context.Context, in *GetFramerDTO, opts ...grpc.CallOption) (*GetFramerVO, error)
	ListFramer(ctx context.Context, in *ListFramerDTO, opts ...grpc.CallOption) (*ListFramerVO, error)
}

type framerClient struct {
	cc grpc.ClientConnInterface
}

func NewFramerClient(cc grpc.ClientConnInterface) FramerClient {
	return &framerClient{cc}
}

func (c *framerClient) CreateFramer(ctx context.Context, in *CreateFramerDTO, opts ...grpc.CallOption) (*CreateFramerVO, error) {
	out := new(CreateFramerVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.Framer/CreateFramer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framerClient) UpdateFramer(ctx context.Context, in *UpdateFramerDTO, opts ...grpc.CallOption) (*UpdateFramerVO, error) {
	out := new(UpdateFramerVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.Framer/UpdateFramer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framerClient) GetFramer(ctx context.Context, in *GetFramerDTO, opts ...grpc.CallOption) (*GetFramerVO, error) {
	out := new(GetFramerVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.Framer/GetFramer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *framerClient) ListFramer(ctx context.Context, in *ListFramerDTO, opts ...grpc.CallOption) (*ListFramerVO, error) {
	out := new(ListFramerVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.Framer/ListFramer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FramerServer is the server API for Framer service.
// All implementations must embed UnimplementedFramerServer
// for forward compatibility
type FramerServer interface {
	CreateFramer(context.Context, *CreateFramerDTO) (*CreateFramerVO, error)
	UpdateFramer(context.Context, *UpdateFramerDTO) (*UpdateFramerVO, error)
	GetFramer(context.Context, *GetFramerDTO) (*GetFramerVO, error)
	ListFramer(context.Context, *ListFramerDTO) (*ListFramerVO, error)
	mustEmbedUnimplementedFramerServer()
}

// UnimplementedFramerServer must be embedded to have forward compatible implementations.
type UnimplementedFramerServer struct {
}

func (UnimplementedFramerServer) CreateFramer(context.Context, *CreateFramerDTO) (*CreateFramerVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFramer not implemented")
}
func (UnimplementedFramerServer) UpdateFramer(context.Context, *UpdateFramerDTO) (*UpdateFramerVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFramer not implemented")
}
func (UnimplementedFramerServer) GetFramer(context.Context, *GetFramerDTO) (*GetFramerVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFramer not implemented")
}
func (UnimplementedFramerServer) ListFramer(context.Context, *ListFramerDTO) (*ListFramerVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFramer not implemented")
}
func (UnimplementedFramerServer) mustEmbedUnimplementedFramerServer() {}

// UnsafeFramerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FramerServer will
// result in compilation errors.
type UnsafeFramerServer interface {
	mustEmbedUnimplementedFramerServer()
}

func RegisterFramerServer(s grpc.ServiceRegistrar, srv FramerServer) {
	s.RegisterService(&Framer_ServiceDesc, srv)
}

func _Framer_CreateFramer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFramerDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramerServer).CreateFramer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.Framer/CreateFramer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramerServer).CreateFramer(ctx, req.(*CreateFramerDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _Framer_UpdateFramer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFramerDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramerServer).UpdateFramer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.Framer/UpdateFramer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramerServer).UpdateFramer(ctx, req.(*UpdateFramerDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _Framer_GetFramer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFramerDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramerServer).GetFramer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.Framer/GetFramer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramerServer).GetFramer(ctx, req.(*GetFramerDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _Framer_ListFramer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFramerDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FramerServer).ListFramer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.Framer/ListFramer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FramerServer).ListFramer(ctx, req.(*ListFramerDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// Framer_ServiceDesc is the grpc.ServiceDesc for Framer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Framer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.create.v1.Framer",
	HandlerType: (*FramerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFramer",
			Handler:    _Framer_CreateFramer_Handler,
		},
		{
			MethodName: "UpdateFramer",
			Handler:    _Framer_UpdateFramer_Handler,
		},
		{
			MethodName: "GetFramer",
			Handler:    _Framer_GetFramer_Handler,
		},
		{
			MethodName: "ListFramer",
			Handler:    _Framer_ListFramer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/create/v1/framer.proto",
}
