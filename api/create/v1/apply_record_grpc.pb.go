// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/create/v1/apply_record.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplyRecordClient is the client API for ApplyRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplyRecordClient interface {
	CreateApplyRecord(ctx context.Context, in *CreateApplyRecordDTO, opts ...grpc.CallOption) (*CreateApplyRecordVO, error)
	UpdateApplyRecord(ctx context.Context, in *UpdateApplyRecordRequest, opts ...grpc.CallOption) (*UpdateApplyRecordReply, error)
	DeleteApplyRecord(ctx context.Context, in *DeleteApplyRecordRequest, opts ...grpc.CallOption) (*DeleteApplyRecordReply, error)
	GetApplyRecord(ctx context.Context, in *GetApplyRecordDTO, opts ...grpc.CallOption) (*GetApplyRecordVO, error)
	ListApplyRecord(ctx context.Context, in *ListApplyRecordDTO, opts ...grpc.CallOption) (*ListApplyRecordVO, error)
}

type applyRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewApplyRecordClient(cc grpc.ClientConnInterface) ApplyRecordClient {
	return &applyRecordClient{cc}
}

func (c *applyRecordClient) CreateApplyRecord(ctx context.Context, in *CreateApplyRecordDTO, opts ...grpc.CallOption) (*CreateApplyRecordVO, error) {
	out := new(CreateApplyRecordVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.ApplyRecord/CreateApplyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applyRecordClient) UpdateApplyRecord(ctx context.Context, in *UpdateApplyRecordRequest, opts ...grpc.CallOption) (*UpdateApplyRecordReply, error) {
	out := new(UpdateApplyRecordReply)
	err := c.cc.Invoke(ctx, "/api.create.v1.ApplyRecord/UpdateApplyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applyRecordClient) DeleteApplyRecord(ctx context.Context, in *DeleteApplyRecordRequest, opts ...grpc.CallOption) (*DeleteApplyRecordReply, error) {
	out := new(DeleteApplyRecordReply)
	err := c.cc.Invoke(ctx, "/api.create.v1.ApplyRecord/DeleteApplyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applyRecordClient) GetApplyRecord(ctx context.Context, in *GetApplyRecordDTO, opts ...grpc.CallOption) (*GetApplyRecordVO, error) {
	out := new(GetApplyRecordVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.ApplyRecord/GetApplyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applyRecordClient) ListApplyRecord(ctx context.Context, in *ListApplyRecordDTO, opts ...grpc.CallOption) (*ListApplyRecordVO, error) {
	out := new(ListApplyRecordVO)
	err := c.cc.Invoke(ctx, "/api.create.v1.ApplyRecord/ListApplyRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplyRecordServer is the server API for ApplyRecord service.
// All implementations must embed UnimplementedApplyRecordServer
// for forward compatibility
type ApplyRecordServer interface {
	CreateApplyRecord(context.Context, *CreateApplyRecordDTO) (*CreateApplyRecordVO, error)
	UpdateApplyRecord(context.Context, *UpdateApplyRecordRequest) (*UpdateApplyRecordReply, error)
	DeleteApplyRecord(context.Context, *DeleteApplyRecordRequest) (*DeleteApplyRecordReply, error)
	GetApplyRecord(context.Context, *GetApplyRecordDTO) (*GetApplyRecordVO, error)
	ListApplyRecord(context.Context, *ListApplyRecordDTO) (*ListApplyRecordVO, error)
	mustEmbedUnimplementedApplyRecordServer()
}

// UnimplementedApplyRecordServer must be embedded to have forward compatible implementations.
type UnimplementedApplyRecordServer struct {
}

func (UnimplementedApplyRecordServer) CreateApplyRecord(context.Context, *CreateApplyRecordDTO) (*CreateApplyRecordVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplyRecord not implemented")
}
func (UnimplementedApplyRecordServer) UpdateApplyRecord(context.Context, *UpdateApplyRecordRequest) (*UpdateApplyRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplyRecord not implemented")
}
func (UnimplementedApplyRecordServer) DeleteApplyRecord(context.Context, *DeleteApplyRecordRequest) (*DeleteApplyRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplyRecord not implemented")
}
func (UnimplementedApplyRecordServer) GetApplyRecord(context.Context, *GetApplyRecordDTO) (*GetApplyRecordVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplyRecord not implemented")
}
func (UnimplementedApplyRecordServer) ListApplyRecord(context.Context, *ListApplyRecordDTO) (*ListApplyRecordVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplyRecord not implemented")
}
func (UnimplementedApplyRecordServer) mustEmbedUnimplementedApplyRecordServer() {}

// UnsafeApplyRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplyRecordServer will
// result in compilation errors.
type UnsafeApplyRecordServer interface {
	mustEmbedUnimplementedApplyRecordServer()
}

func RegisterApplyRecordServer(s grpc.ServiceRegistrar, srv ApplyRecordServer) {
	s.RegisterService(&ApplyRecord_ServiceDesc, srv)
}

func _ApplyRecord_CreateApplyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplyRecordDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyRecordServer).CreateApplyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.ApplyRecord/CreateApplyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyRecordServer).CreateApplyRecord(ctx, req.(*CreateApplyRecordDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplyRecord_UpdateApplyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyRecordServer).UpdateApplyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.ApplyRecord/UpdateApplyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyRecordServer).UpdateApplyRecord(ctx, req.(*UpdateApplyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplyRecord_DeleteApplyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyRecordServer).DeleteApplyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.ApplyRecord/DeleteApplyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyRecordServer).DeleteApplyRecord(ctx, req.(*DeleteApplyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplyRecord_GetApplyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplyRecordDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyRecordServer).GetApplyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.ApplyRecord/GetApplyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyRecordServer).GetApplyRecord(ctx, req.(*GetApplyRecordDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplyRecord_ListApplyRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplyRecordDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyRecordServer).ListApplyRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.create.v1.ApplyRecord/ListApplyRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyRecordServer).ListApplyRecord(ctx, req.(*ListApplyRecordDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplyRecord_ServiceDesc is the grpc.ServiceDesc for ApplyRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplyRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.create.v1.ApplyRecord",
	HandlerType: (*ApplyRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplyRecord",
			Handler:    _ApplyRecord_CreateApplyRecord_Handler,
		},
		{
			MethodName: "UpdateApplyRecord",
			Handler:    _ApplyRecord_UpdateApplyRecord_Handler,
		},
		{
			MethodName: "DeleteApplyRecord",
			Handler:    _ApplyRecord_DeleteApplyRecord_Handler,
		},
		{
			MethodName: "GetApplyRecord",
			Handler:    _ApplyRecord_GetApplyRecord_Handler,
		},
		{
			MethodName: "ListApplyRecord",
			Handler:    _ApplyRecord_ListApplyRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/create/v1/apply_record.proto",
}
